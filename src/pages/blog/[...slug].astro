---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import comunidevBlogLogo from "../../images/logo-blog.svg";
import DiscordBanner from "../../components/DiscordBanner.astro";
import "@fontsource/fira-sans/600-italic.css";
import "@fontsource/fira-sans/400.css";
import { css } from "../../../styled-system/css";

export const prerender = true;

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}
// 2. For your template, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();

const tagClasslist = (i) => ({
  [css({
    color: "brand-primary",
    borderColor: "brand-primary",
  })]: i % 4 === 0,
  [css({
    color: "accent-lime",
    borderColor: "accent-lime",
  })]: i % 4 === 1,
  [css({
    color: "accent-cyan",
    borderColor: "accent-cyan",
  })]: i % 4 === 2,
  [css({
    color: "accent-pink",
    borderColor: "accent-pink",
  })]: i % 4 === 3,
});

const styles = {
  h1: css({
    color: "brand-primary",
    xl: {
      fontSize: "6xl",
    },
    lineHeight: "tight",
    fontSize: "5xl",
    mb: "6",
    textShadow: "0 0 token(sizes.lg) token(colors.brand-primary)",
  }),
  body: css({
    display: "flex",
    flexDirection: "column",
    alignItems: "end",
    "2xl": {
      mr: "15%",
    },
    xl: {
      mr: "5%",
    },
    backgroundColor: "brand-bg",
  }),
  post: css({
    position: "relative",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    w: "full",
    px: "2",
    xl: {
      pt: "0",
      w: "4xl",
    },
  }),
  postHeader: css({
    borderTop: "2px solid",
    borderColor: "brand-primary",
    mt: "2",
    xl: {
      mt: "0",
      borderTop: "none",
      pt: "12",
    },
    lg: {
      pt: "24",
      pl: "36",
      pr: "16",
    },
    pt: "8",
    position: "relative",
    px: "8",
    w: "full",
    pb: "12",

    _before: {
      content: '" "',
      position: "absolute",
      top: "0",
      left: "0",
      borderLeftColor: "brand-primary",
      borderLeftWidth: "2px",
      w: "1",
      h: "94%",
      zIndex: "-2",
    },
    _after: {
      content: '" "',
      top: "0",
      right: "0",
      position: "absolute",
      borderRightColor: "brand-primary",
      borderRightWidth: "2px",
      w: "1",
      h: "110%",
      zIndex: "-10",
    },
    zIndex: "2",
  }),
  blogLogo: css({
    w: "64",
    mb: "8",
  }),
  leftSidebarPositioner: css({
    display: "none",
    xl: {
      display: "initial",
      position: "absolute",
      left: "0",
      h: "full",
      w: "full",
      zIndex: "-1",
    },
  }),
  leftSidebar: css({
    position: "absolute",
    h: "full",
    w: "full",
    display: "flex",
    flexDirection: "column",
    alignItems: "end",
    left: "-94%",
  }),
  sidebarFeaturedImage: css({
    border: "2px solid",
    borderColor: "brand-primary",
    w: "auto",
    maxH: "md",
    mb: "24",
  }),
  featuredImage: css({
    xl: {
      display: "none",
    },
    w: "full",
    border: "2px solid",
    borderColor: "brand-primary",
    mb: "8",
  }),

  tags: css({
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    gap: "2",
    mb: "10",
    flexWrap: "wrap",
  }),
  tag: css({
    fontSize: "sm",
    display: "inline-block",
    borderStyle: "solid",
    borderWidth: "1px",
    pt: "0.5",
    py: "1",
    px: "2",
  }),
  author: css({
    w: "100%",
    flex: "1 1",
    color: "white",
    fontStyle: "italic",
    fontSize: "sm",
    whiteSpace: "nowrap",
  }),
  intro: css({
    color: "white",
    px: "8",
    lineHeight: "1.8",
    fontStyle: "italic",
    fontWeight: "400",
    xl: {
      pr: "32",
    },
  }),
  inPostDiscordBanner: css({
    mb: "12",
    xl: {
      display: "none",
    },
  }),
  content: css({
    xl: {
      w: "3xl",
      pl: "14",
    },
    lg: {
      px: "32",
    },
    sm: {
      px: "16",
    },
    px: "8",
    w: "full",
    position: "relative",
    lineHeight: "2",

    "& h2": {
      fontSize: "4xl",
      color: "brand-primary",
      fontWeight: "400",
      lineHeight: "snug",
      mb: "4",
      backdropOpacity: "10",
      textShadow: "0 0 token(sizes.lg) token(colors.brand-secondary)",
    },
    "& h3": {
      fontSize: "3xl",
      color: "brand-secondary",
      fontWeight: "400",
      lineHeight: "snug",
      mb: "4",
      backdropOpacity: "10",
      textShadow: "0 0 token(sizes.lg) token(colors.brand-secondary)",
    },
    "& .astro-code": {
      fontSize: "sm",
      mb: "8",
      p: "8",
    },
    "& p": {
      fontSize: "md",
      color: "white",
      mb: "8",
      mt: "4",
    },
    "& li": {
      fontSize: "md",
      color: "white",
    },
    "& strong": {
      color: "accent-lime",
    },

    "& iframe": {
      w: "full",
    },
  }),
};
---

<html lang="es">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{entry.data.title}</title>
  </head>
  <body class={styles.body}>
    <div class={styles.post}>
      <div class={styles.postHeader}>
        <a href="/">
          <Image
            src={comunidevBlogLogo}
            alt="blog-logo"
            class={styles.blogLogo}
          />
        </a>
        <div class={styles.leftSidebarPositioner}>
          <div class={styles.leftSidebar}>
            <Image
              src={entry.data.image}
              alt={entry.data.title}
              class={styles.sidebarFeaturedImage}
              height={420}
            />
            <DiscordBanner />
          </div>
        </div>

        <Image
          src={entry.data.image}
          alt={entry.data.title}
          class={styles.featuredImage}
          width={930}
        />
        <h1 class={styles.h1}>
          {entry.data.title}
        </h1>
        <div class={styles.tags}>
          {
            entry.data.tags.map((tag, i) => (
              <div class:list={[styles.tag, tagClasslist(i)]}>{tag}</div>
            ))
          }
          <span class={styles.author}
            ><span class={css({ ml: "1", mr: "3" })}>|</span>por {
              entry.data.author
            }</span
          >
        </div>
        <div class={styles.intro}>
          {entry.data.intro}
        </div>
      </div>
      <div class={styles.inPostDiscordBanner}>
        <DiscordBanner />
      </div>
      <div class={styles.content}>
        <Content />
      </div>
    </div>
  </body>
</html>
